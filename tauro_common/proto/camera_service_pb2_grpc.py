# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

from tauro_common.proto import (
    camera_service_pb2 as tauro__common_dot_proto_dot_camera__service__pb2,
)

GRPC_GENERATED_VERSION = "1.73.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in tauro_common/proto/camera_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class CameraServiceStub:
    """Camera service for image capture and streaming"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamImages = channel.unary_stream(
            "/tauro.common.proto.CameraService/StreamImages",
            request_serializer=tauro__common_dot_proto_dot_camera__service__pb2.StreamRequest.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_camera__service__pb2.ImageFrame.FromString,
            _registered_method=True,
        )
        self.CaptureFrame = channel.unary_unary(
            "/tauro.common.proto.CameraService/CaptureFrame",
            request_serializer=tauro__common_dot_proto_dot_camera__service__pb2.CaptureRequest.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_camera__service__pb2.ImageFrame.FromString,
            _registered_method=True,
        )
        self.UpdateStreamParameters = channel.unary_unary(
            "/tauro.common.proto.CameraService/UpdateStreamParameters",
            request_serializer=tauro__common_dot_proto_dot_camera__service__pb2.UpdateStreamRequest.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_camera__service__pb2.UpdateStreamResponse.FromString,
            _registered_method=True,
        )
        self.GetCameraInfo = channel.unary_unary(
            "/tauro.common.proto.CameraService/GetCameraInfo",
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_camera__service__pb2.CameraInfoResponse.FromString,
            _registered_method=True,
        )
        self.StopAllStreams = channel.unary_unary(
            "/tauro.common.proto.CameraService/StopAllStreams",
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_camera__service__pb2.StopStreamResponse.FromString,
            _registered_method=True,
        )


class CameraServiceServicer:
    """Camera service for image capture and streaming"""

    def StreamImages(self, request, context):
        """Start streaming images from specified cameras"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CaptureFrame(self, request, context):
        """Capture a single frame from specified cameras"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateStreamParameters(self, request, context):
        """Update stream parameters without restarting"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetCameraInfo(self, request, context):
        """Get available cameras and their status"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StopAllStreams(self, request, context):
        """Stop all active streams"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CameraServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StreamImages": grpc.unary_stream_rpc_method_handler(
            servicer.StreamImages,
            request_deserializer=tauro__common_dot_proto_dot_camera__service__pb2.StreamRequest.FromString,
            response_serializer=tauro__common_dot_proto_dot_camera__service__pb2.ImageFrame.SerializeToString,
        ),
        "CaptureFrame": grpc.unary_unary_rpc_method_handler(
            servicer.CaptureFrame,
            request_deserializer=tauro__common_dot_proto_dot_camera__service__pb2.CaptureRequest.FromString,
            response_serializer=tauro__common_dot_proto_dot_camera__service__pb2.ImageFrame.SerializeToString,
        ),
        "UpdateStreamParameters": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateStreamParameters,
            request_deserializer=tauro__common_dot_proto_dot_camera__service__pb2.UpdateStreamRequest.FromString,
            response_serializer=tauro__common_dot_proto_dot_camera__service__pb2.UpdateStreamResponse.SerializeToString,
        ),
        "GetCameraInfo": grpc.unary_unary_rpc_method_handler(
            servicer.GetCameraInfo,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=tauro__common_dot_proto_dot_camera__service__pb2.CameraInfoResponse.SerializeToString,
        ),
        "StopAllStreams": grpc.unary_unary_rpc_method_handler(
            servicer.StopAllStreams,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=tauro__common_dot_proto_dot_camera__service__pb2.StopStreamResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "tauro.common.proto.CameraService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("tauro.common.proto.CameraService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class CameraService:
    """Camera service for image capture and streaming"""

    @staticmethod
    def StreamImages(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/tauro.common.proto.CameraService/StreamImages",
            tauro__common_dot_proto_dot_camera__service__pb2.StreamRequest.SerializeToString,
            tauro__common_dot_proto_dot_camera__service__pb2.ImageFrame.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CaptureFrame(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tauro.common.proto.CameraService/CaptureFrame",
            tauro__common_dot_proto_dot_camera__service__pb2.CaptureRequest.SerializeToString,
            tauro__common_dot_proto_dot_camera__service__pb2.ImageFrame.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdateStreamParameters(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tauro.common.proto.CameraService/UpdateStreamParameters",
            tauro__common_dot_proto_dot_camera__service__pb2.UpdateStreamRequest.SerializeToString,
            tauro__common_dot_proto_dot_camera__service__pb2.UpdateStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetCameraInfo(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tauro.common.proto.CameraService/GetCameraInfo",
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tauro__common_dot_proto_dot_camera__service__pb2.CameraInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def StopAllStreams(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tauro.common.proto.CameraService/StopAllStreams",
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tauro__common_dot_proto_dot_camera__service__pb2.StopStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
