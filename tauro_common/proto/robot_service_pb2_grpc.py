# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

from tauro_common.proto import robot_service_pb2 as tauro__common_dot_proto_dot_robot__service__pb2

GRPC_GENERATED_VERSION = "1.73.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in tauro_common/proto/robot_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class RobotControlServiceStub:
    """Main service for robot control"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
            "/tauro.common.proto.RobotControlService/Connect",
            request_serializer=tauro__common_dot_proto_dot_robot__service__pb2.ConnectRequest.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.ConnectResponse.FromString,
            _registered_method=True,
        )
        self.Disconnect = channel.unary_unary(
            "/tauro.common.proto.RobotControlService/Disconnect",
            request_serializer=tauro__common_dot_proto_dot_robot__service__pb2.DisconnectRequest.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.DisconnectResponse.FromString,
            _registered_method=True,
        )
        self.Calibrate = channel.unary_unary(
            "/tauro.common.proto.RobotControlService/Calibrate",
            request_serializer=tauro__common_dot_proto_dot_robot__service__pb2.CalibrateRequest.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.CalibrateResponse.FromString,
            _registered_method=True,
        )
        self.StreamControl = channel.stream_stream(
            "/tauro.common.proto.RobotControlService/StreamControl",
            request_serializer=tauro__common_dot_proto_dot_robot__service__pb2.ControlCommand.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.RobotState.FromString,
            _registered_method=True,
        )
        self.GetState = channel.unary_unary(
            "/tauro.common.proto.RobotControlService/GetState",
            request_serializer=tauro__common_dot_proto_dot_robot__service__pb2.GetStateRequest.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.RobotState.FromString,
            _registered_method=True,
        )
        self.SendAction = channel.unary_unary(
            "/tauro.common.proto.RobotControlService/SendAction",
            request_serializer=tauro__common_dot_proto_dot_robot__service__pb2.ControlCommand.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.ActionResponse.FromString,
            _registered_method=True,
        )
        self.HealthCheck = channel.unary_unary(
            "/tauro.common.proto.RobotControlService/HealthCheck",
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.HealthStatus.FromString,
            _registered_method=True,
        )


class RobotControlServiceServicer:
    """Main service for robot control"""

    def Connect(self, request, context):
        """Establish connection to robot"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Disconnect(self, request, context):
        """Disconnect from robot"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Calibrate(self, request, context):
        """Calibrate robot"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StreamControl(self, request_iterator, context):
        """Stream control commands and receive state updates"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetState(self, request, context):
        """Get current robot state"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendAction(self, request, context):
        """Send single action"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def HealthCheck(self, request, context):
        """Health check"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RobotControlServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Connect": grpc.unary_unary_rpc_method_handler(
            servicer.Connect,
            request_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.ConnectRequest.FromString,
            response_serializer=tauro__common_dot_proto_dot_robot__service__pb2.ConnectResponse.SerializeToString,
        ),
        "Disconnect": grpc.unary_unary_rpc_method_handler(
            servicer.Disconnect,
            request_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.DisconnectRequest.FromString,
            response_serializer=tauro__common_dot_proto_dot_robot__service__pb2.DisconnectResponse.SerializeToString,
        ),
        "Calibrate": grpc.unary_unary_rpc_method_handler(
            servicer.Calibrate,
            request_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.CalibrateRequest.FromString,
            response_serializer=tauro__common_dot_proto_dot_robot__service__pb2.CalibrateResponse.SerializeToString,
        ),
        "StreamControl": grpc.stream_stream_rpc_method_handler(
            servicer.StreamControl,
            request_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.ControlCommand.FromString,
            response_serializer=tauro__common_dot_proto_dot_robot__service__pb2.RobotState.SerializeToString,
        ),
        "GetState": grpc.unary_unary_rpc_method_handler(
            servicer.GetState,
            request_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.GetStateRequest.FromString,
            response_serializer=tauro__common_dot_proto_dot_robot__service__pb2.RobotState.SerializeToString,
        ),
        "SendAction": grpc.unary_unary_rpc_method_handler(
            servicer.SendAction,
            request_deserializer=tauro__common_dot_proto_dot_robot__service__pb2.ControlCommand.FromString,
            response_serializer=tauro__common_dot_proto_dot_robot__service__pb2.ActionResponse.SerializeToString,
        ),
        "HealthCheck": grpc.unary_unary_rpc_method_handler(
            servicer.HealthCheck,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=tauro__common_dot_proto_dot_robot__service__pb2.HealthStatus.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "tauro.common.proto.RobotControlService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "tauro.common.proto.RobotControlService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class RobotControlService:
    """Main service for robot control"""

    @staticmethod
    def Connect(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tauro.common.proto.RobotControlService/Connect",
            tauro__common_dot_proto_dot_robot__service__pb2.ConnectRequest.SerializeToString,
            tauro__common_dot_proto_dot_robot__service__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Disconnect(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tauro.common.proto.RobotControlService/Disconnect",
            tauro__common_dot_proto_dot_robot__service__pb2.DisconnectRequest.SerializeToString,
            tauro__common_dot_proto_dot_robot__service__pb2.DisconnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Calibrate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tauro.common.proto.RobotControlService/Calibrate",
            tauro__common_dot_proto_dot_robot__service__pb2.CalibrateRequest.SerializeToString,
            tauro__common_dot_proto_dot_robot__service__pb2.CalibrateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def StreamControl(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/tauro.common.proto.RobotControlService/StreamControl",
            tauro__common_dot_proto_dot_robot__service__pb2.ControlCommand.SerializeToString,
            tauro__common_dot_proto_dot_robot__service__pb2.RobotState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetState(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tauro.common.proto.RobotControlService/GetState",
            tauro__common_dot_proto_dot_robot__service__pb2.GetStateRequest.SerializeToString,
            tauro__common_dot_proto_dot_robot__service__pb2.RobotState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SendAction(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tauro.common.proto.RobotControlService/SendAction",
            tauro__common_dot_proto_dot_robot__service__pb2.ControlCommand.SerializeToString,
            tauro__common_dot_proto_dot_robot__service__pb2.ActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def HealthCheck(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tauro.common.proto.RobotControlService/HealthCheck",
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tauro__common_dot_proto_dot_robot__service__pb2.HealthStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
